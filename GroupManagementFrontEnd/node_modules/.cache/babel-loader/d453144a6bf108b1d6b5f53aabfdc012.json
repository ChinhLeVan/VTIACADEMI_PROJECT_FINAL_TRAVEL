{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\IT_VTI\\\\ProjectFinal\\\\FrontEnd\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\IT_VTI\\\\ProjectFinal\\\\FrontEnd\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar axiosClient = axios.create({\n  baseURL: \"http://localhost:8080/api/v1\",\n  //timeout: 5000, // default is `0` (no timeout)\n  responseType: 'json'\n});\naxiosClient.interceptors.request.use( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", config);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\naxiosClient.interceptors.response.use(function (response) {\n  if (response && response.data !== undefined) {\n    // only get data\n    return response.data;\n  }\n\n  return response;\n}, function (error) {\n  if (error.response) {\n    throw error.response;\n  }\n\n  if (error.request) {\n    throw error.request;\n  } // Handle errors\n\n\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["D:/IT_VTI/ProjectFinal/FrontEnd/GroupManagementFrontEnd/src/api/Api.js"],"names":["axios","axiosClient","create","baseURL","responseType","interceptors","request","use","config","response","data","undefined","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC7BC,EAAAA,OAAO,gCADsB;AAE7B;AACAC,EAAAA,YAAY,EAAE;AAHe,CAAb,CAApB;AAMAH,WAAW,CAACI,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC;AAAA,sEAAqC,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,6CAE1BA,MAF0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;AAKAP,WAAW,CAACI,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CAAsC,UAACE,QAAD,EAAc;AAChD,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAT,KAAkBC,SAAlC,EAA6C;AACzC;AACA,WAAOF,QAAQ,CAACC,IAAhB;AACH;;AAED,SAAOD,QAAP;AACH,CAPD,EAOG,UAACG,KAAD,EAAW;AAEV,MAAIA,KAAK,CAACH,QAAV,EAAoB;AAChB,UAAMG,KAAK,CAACH,QAAZ;AACH;;AAED,MAAIG,KAAK,CAACN,OAAV,EAAmB;AACf,UAAMM,KAAK,CAACN,OAAZ;AACH,GARS,CAUV;;;AACA,QAAMM,KAAN;AACH,CAnBD;AAqBA,eAAeX,WAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL: `http://localhost:8080/api/v1`,\r\n    //timeout: 5000, // default is `0` (no timeout)\r\n    responseType: 'json'\r\n});\r\n\r\naxiosClient.interceptors.request.use(async (config) => {\r\n    // Handle token here ...\r\n    return config;\r\n});\r\n\r\naxiosClient.interceptors.response.use((response) => {\r\n    if (response && response.data !== undefined) {\r\n        // only get data\r\n        return response.data;\r\n    }\r\n\r\n    return response;\r\n}, (error) => {\r\n\r\n    if (error.response) {\r\n        throw error.response;\r\n    }\r\n\r\n    if (error.request) {\r\n        throw error.request;\r\n    }\r\n\r\n    // Handle errors\r\n    throw error;\r\n});\r\n\r\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}